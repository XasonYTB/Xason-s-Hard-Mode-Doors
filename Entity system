-- Settings for the monster
local speed = 75            -- Monster's speed when moving to the nodes
local spawnDelay = 2        -- Delay before the monster starts moving after spawning
local rayDistance = 150     -- Raycasting distance to detect players
local updateRate = 0.1      -- Rate at which the raycasting updates (in seconds)

local activeThreads = 0     -- Track the number of active detection threads

-- Function to continuously check for players using raycasting
local function detectPlayersContinuously(part)
    local continueDetection = true

    local rayDirections = {
        Vector3.new(0, 0, -1), -- Forward
        Vector3.new(0, 0, 1),  -- Backward
        Vector3.new(1, 0, 0),  -- Right
        Vector3.new(-1, 0, 0), -- Left
        Vector3.new(0, 1, 0),  -- Up
        Vector3.new(0, -1, 0)  -- Down
    }

    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {workspace.CurrentRooms} -- Ignore pathfinding nodes
    raycastParams.FilterType = Enum.RaycastFilterType.Exclude

    while continueDetection do
        for _, direction in ipairs(rayDirections) do
            local rayResult = workspace:Raycast(part.Position, direction * rayDistance, raycastParams)

            if rayResult then
                print("Ray hit:", rayResult.Instance:GetFullName(), "Position:", rayResult.Position)
                local hitPart = rayResult.Instance
                local character = hitPart and hitPart:FindFirstAncestorOfClass("Model")

                if character and character:FindFirstChild("Humanoid") then
                    local hiding = character:GetAttribute("Hiding") -- Check if the player is hiding
                    if hiding then
                        print("Player detected but hiding. No action taken.")
                    else
                        print("Player detected and not hiding. Simulating kill.")
                    end
                end
            end
        end
        wait(updateRate)
    end
end

-- Function to load and spawn the BlastEntity (Monster)
local function spawnMonster()
    local sortedModels = workspace.CurrentRooms:GetChildren()

    if #sortedModels > 0 then
        local firstModel = sortedModels[1]
        local entrance = firstModel:FindFirstChild("RoomEntrance")
        local startPosition = entrance and entrance:IsA("BasePart") and entrance.Position or Vector3.new(0, 0, 0)

        -- Load the monster asset (BlastEntity) dynamically
        local assetId = "rbxassetid://89338335945009"
        local loadedAsset = game:GetObjects(assetId)
        local BlastEntity = loadedAsset and loadedAsset[1] -- Assume the first object in the array is the monster Part

        if BlastEntity and BlastEntity:IsA("BasePart") then
            BlastEntity.Position = startPosition
            BlastEntity.Transparency = 1 -- Make the monster invisible
            BlastEntity.Anchored = true
            BlastEntity.Parent = workspace
            print("BlastEntity part loaded and placed at RoomEntrance:", firstModel.Name)
        else
            error("Failed to load BlastEntity as a BasePart.")
        end

        print("Waiting for", spawnDelay, "seconds before starting movement.")
        wait(spawnDelay)

        -- Start continuous player detection in a separate thread
        spawn(function()
            detectPlayersContinuously(BlastEntity)
        end)

        return BlastEntity
    end

    return nil
end

-- Function to get the next node from the custom pathfinding nodes folder
local function getNextNode(customPathFolder, startIndex)
    local nodes = customPathFolder and customPathFolder:GetChildren() or {}
    if #nodes == 0 then
        print("No nodes found in:", customPathFolder.Name)
        return nil, startIndex
    end

    table.sort(nodes, function(a, b) return a.Name < b.Name end)
    for i = startIndex + 1, #nodes do
        return nodes[i], i
    end
    return nil, startIndex
end

-- Function to move the part to a target position at a constant speed
local function moveToPosition(part, targetPosition, speed)
    local startPos = part.Position
    local distance = (startPos - targetPosition).Magnitude
    local travelTime = distance / speed
    local startTime = tick()

    while tick() - startTime < travelTime do
        local progress = (tick() - startTime) / travelTime
        part.Position = startPos:Lerp(targetPosition, progress)
        wait()
    end
    part.Position = targetPosition
end

-- Pathfinding movement system that follows nodes
local function pathfindAndMoveEntity(BlastEntity)
    -- Get the room's custom pathfinding nodes
    local currentModel = workspace.CurrentRooms:FindFirstChild("Room1") -- Change this as needed
    if not currentModel then
        return
    end

    -- Get the custom pathfinding folder for the entity
    local customPathFolder = currentModel:FindFirstChild("EntCustomPathFindingNodes")
    if not customPathFolder then
        print("No pathfinding nodes found.")
        return
    end

    local nodeIndex = 0

    -- Move through the nodes
    while customPathFolder do
        local nextNode, nextIndex = getNextNode(customPathFolder, nodeIndex)
        if nextNode then
            print("Moving to node:", nextIndex, "in model:", currentModel.Name)
            moveToPosition(BlastEntity, nextNode.Position, speed)
            nodeIndex = nextIndex
        else
            -- If there are no more nodes, find the exit and move there
            local exit = currentModel:FindFirstChild("RoomExit")
            if exit and exit:IsA("BasePart") then
                print("Moving to RoomExit of model:", currentModel.Name)
                moveToPosition(BlastEntity, exit.Position, speed)
                break
            end
        end
    end
end

-- Main Script
while true do
    -- Spawn the monster and start pathfinding
    local BlastEntity = spawnMonster()
    if BlastEntity then
        -- Start pathfinding with the loaded BlastEntity
        pathfindAndMoveEntity(BlastEntity)
        print("Completed all models. Moving forward and despawning.")
        BlastEntity:Destroy()
        wait(50)
    end
end
